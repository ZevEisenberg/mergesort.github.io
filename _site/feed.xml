<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2017-12-12T13:47:44-05:00</updated><id>http://localhost:4000/</id><title type="html">Fabisevi.ch</title><subtitle>iOS Developer &amp; Design Contractor
</subtitle><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><entry><title type="html">Handing Off Public Extension</title><link href="http://localhost:4000/2017/12/06/handing-off-public-extension/" rel="alternate" type="text/html" title="Handing Off Public Extension" /><published>2017-12-06T00:00:00-05:00</published><updated>2017-12-06T00:00:00-05:00</updated><id>http://localhost:4000/2017/12/06/handing-off-public-extension</id><content type="html" xml:base="http://localhost:4000/2017/12/06/handing-off-public-extension/">&lt;p&gt;Firing off the first tweet for &lt;a href=&quot;https://twitter.com/PublicExtension&quot;&gt;@PublicExtension&lt;/a&gt; on October 9th, 2015 was a rush. I was on the tail end of my batch at the &lt;a href=&quot;http://recurse.com&quot;&gt;Recurse Center&lt;/a&gt;, after having spent the &lt;a href=&quot;/one-month-at-recurse-center&quot;&gt;previous quarter transitioning&lt;/a&gt; from an backend engineer to writing Swift every day. The goal was to regularly post extensions I‚Äôve come up with, stumbled upon, or received from the community. In the span of a year, I collected 89 extensions, had &lt;a href=&quot;https://twitter.com/jasdev/status/767781639837609984&quot;&gt;countless conversations&lt;/a&gt; with the Core Team, and even &lt;a href=&quot;https://www.instagram.com/p/BKIGsJvjg74&quot;&gt;represented the account at XOXO Festival&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I (accidentally) treated Public Extension like a ‚Äú&lt;a href=&quot;https://dianaberlin.com/posts/no-more-forever-projects&quot;&gt;Forever Project&lt;/a&gt;.‚Äù Without an end in sight, the weight of ‚Äúdo I just keep running this account ad infinitum‚Äù caused missed days to turn into weeks, and weeks into a year of hibernation. My energy drifted elsewhere. &lt;a href=&quot;/&quot;&gt;Writing&lt;/a&gt;, &lt;a href=&quot;/crafting-space&quot;&gt;building out&lt;/a&gt; Peloton‚Äôs iOS team, and &lt;a href=&quot;https://www.instagram.com/p/BU5jrpRgmeW&quot;&gt;crafting memories&lt;/a&gt; with friends on two wheels. Until a couple of weeks ago, I had almost forgotten about the project when Joe‚Äîcommonly aliased as &lt;a href=&quot;https://twitter.com/mergesort&quot;&gt;@mergesort&lt;/a&gt;‚Äîexpressed interest in taking the baton.&lt;/p&gt;

&lt;p&gt;I couldn‚Äôt imagine a better fit. Not only is Joe a &lt;a href=&quot;https://twitter.com/search?l=&amp;amp;q=from%3Ajasdev%20%40mergesort&amp;amp;src=typd&quot;&gt;great friend&lt;/a&gt; who is 1000% game to &lt;a href=&quot;https://twitter.com/mergesort/status/776210727078092800&quot;&gt;volley Swift puns&lt;/a&gt;, but he also has a track record of helping, advising, and guiding folks in the iOS community. A lunch, &lt;a href=&quot;https://github.com/mergesort/Public-Extension&quot;&gt;repository transfer&lt;/a&gt;, and a few iMessages later, Public Extension has a second wind. Joe and I have discussed some of his early plans for the account and I‚Äôm stoked. Please give him the same &lt;a href=&quot;https://twitter.com/parrots/status/779014268905816064&quot;&gt;support&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jakemarsh/status/652543263690199040&quot;&gt;cheers&lt;/a&gt; y‚Äôall have kindly given me along the first leg of PE‚Äôs relay. Below are some notes about the transition and aspects that will remain the same:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To prevent old commit permalinks from breaking, we &lt;a href=&quot;https://github.com/mergesort/Public-Extension&quot;&gt;transferred the repository&lt;/a&gt; to Joe‚Äôs GitHub account and &lt;a href=&quot;https://github.com/Jasdev/Public-Extension&quot;&gt;I forked it&lt;/a&gt;. This means that all of the old tweets can safely be embedded.&lt;/li&gt;
  &lt;li&gt;The account wouldn‚Äôt have been possible without submissions. Going forward, all extensions will &lt;em&gt;continue&lt;/em&gt; to link back to the original author, if applicable and with permission.&lt;/li&gt;
  &lt;li&gt;On the note of submissions, they will still be accepted üíô Joe can provide more details on preferred ways to do so.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="swift" /><category term="featured" /><category term="life-events" /><summary type="html">Firing off the first tweet for @PublicExtension on October 9th, 2015 was a rush. I was on the tail end of my batch at the Recurse Center, after having spent the previous quarter transitioning from an backend engineer to writing Swift every day. The goal was to regularly post extensions I‚Äôve come up with, stumbled upon, or received from the community. In the span of a year, I collected 89 extensions, had countless conversations with the Core Team, and even represented the account at XOXO Festival.</summary></entry><entry><title type="html">Foundations</title><link href="http://localhost:4000/2017/11/07/foundations/" rel="alternate" type="text/html" title="Foundations" /><published>2017-11-07T00:00:00-05:00</published><updated>2017-11-07T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/07/foundations</id><content type="html" xml:base="http://localhost:4000/2017/11/07/foundations/">&lt;p&gt;Every day at a startup is an exercise in getting to tomorrow. Some days it‚Äôs easier, some days it‚Äôs harder, but if you don‚Äôt make it until tomorrow, there won‚Äôt be a next week, month, or year.&lt;/p&gt;

&lt;p&gt;This is why building a long-term foundation is incredibly important. If you keep making it to tomorrow without thinking ahead, in three years you might look at what you‚Äôve built and realize that you‚Äôve set yourself up for mediocrity or failure.&lt;/p&gt;

&lt;p&gt;Every decision you make today is implicitly a decision you‚Äôve made for the next few years. There‚Äôs a question of whether you‚Äôll make it that far, and you can always change course from your decisions (and you should!), but it‚Äôs not without cost.&lt;/p&gt;

&lt;p&gt;Stop thinking about how to build a company that lasts, start thinking about how to build a great company that lasts. Start making decisions today that will help you build a great company. Because down the road you might look back and realize that your company isn‚Äôt that great after all.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="industry" /><summary type="html">Every day at a startup is an exercise in getting to tomorrow. Some days it‚Äôs easier, some days it‚Äôs harder, but if you don‚Äôt make it until tomorrow, there won‚Äôt be a next week, month, or year.</summary></entry><entry><title type="html">Dev Chats - Joe Fabisevich</title><link href="http://localhost:4000/2017/10/24/dev-chats-joe-fabisevich-sam-jarman/" rel="alternate" type="text/html" title="Dev Chats - Joe Fabisevich" /><published>2017-10-24T00:00:00-04:00</published><updated>2017-10-24T00:00:00-04:00</updated><id>http://localhost:4000/2017/10/24/dev-chats-joe-fabisevich-sam-jarman</id><content type="html" xml:base="http://localhost:4000/2017/10/24/dev-chats-joe-fabisevich-sam-jarman/">&lt;h4 id=&quot;introduce-yourself-who-are-you-where-do-you-work&quot;&gt;Introduce yourself! Who are you? Where do you work?&lt;/h4&gt;

&lt;p&gt;Hey Sam, thanks for this interview! I‚Äôve been reading your other developer interviews and am humbled to be in the same company as them.&lt;/p&gt;

&lt;p&gt;I‚Äôm Joe Fabisevich, an iOS developer in New York City, with no specific ties to a company right now. I spent the first 5 or 6 years of my career  working startups like Timehop, Betaworks, and Bitly. Last year I decided to take the things I‚Äôd learned and help other companies grow via consulting work.&lt;/p&gt;

&lt;p&gt;My job is to help companies get through whatever challenges they‚Äôre currently face. I enjoy working most with early stage startups, so a lot of my work focuses around getting startups to their 1.0. Often times they‚Äôre starting with nothing more than sketches and wireframes. Other times I help businesses figure out their mobile strategy, or work with iOS teams to grow their skills. This is especially interesting as iOS has recently moved to Swift, and there are few experts in the field so far. I wanted to add flexibility in my life, and now I‚Äôm able to tackle all different kinds of challenges. Not all of my work is even engineering related, which makes it fun to grow in many directions.&lt;/p&gt;

&lt;h4 id=&quot;who-or-what-got-you-into-programming&quot;&gt;Who or what got you into programming?&lt;/h4&gt;

&lt;p&gt;It‚Äôs a bit clich√©, but I got into programming somewhat by accident. In high school my grades were pretty poor, and I had to choose a major for my junior and senior years. My mom was a mainframe programmer and told me that if I took the computer science course, she would help me out. (Please don‚Äôt tell my 11th grade AP Java teacher Mr. Turner). After about two weeks, she declared that she was completely out of her element, and that I was on my own.&lt;/p&gt;

&lt;p&gt;I was never a great rote learner, but I was always good with understanding patterns and systems. Programming lends itself to hands on learning, which made me finally feel good about learning. After some initial success, I was pretty hooked. As I got better, I was able to start helping others, which was also something I‚Äôd never been able to do.&lt;/p&gt;

&lt;p&gt;In college I majored in computer science, but rather aimlessly. When the iPhone came out, I really wanted to make an app for it with a friend, and so I mustered up my strength and did. The code was awful, and the UI was hideous by today‚Äôs standards, but there were probably only 10,000 or so people building apps, so it was felt like quite an accomplishment. Since there was so little iOS talent out there, I was able to parlay that app into an internship. As I left school (after spending most of it building apps in class), I was able to turn that internship and subsequent apps into my first startup job.&lt;/p&gt;

&lt;h4 id=&quot;whats-the-tech-scene-like-in-nyc-any-major-upsides-and-downsides&quot;&gt;What‚Äôs the tech scene like in NYC? Any major upsides and downsides?&lt;/h4&gt;

&lt;p&gt;The tech scene in New York City is quite a mixed bag, but I feel that way about most things in New York. Tech is not the top dog in this city, which has it‚Äôs pros and cons.&lt;/p&gt;

&lt;p&gt;The biggest pro is that as an industry, we stay mostly grounded. We use our technology to lift up other industries, as well as tech for tech‚Äôs sake. This helps us avoid a monoculture like you see in Silicon Valley.&lt;/p&gt;

&lt;p&gt;The biggest con is that as an industry, we stay mostly grounded. This means that we don‚Äôt attract as much talent (though there‚Äôs still plenty), or work on as many moonshot ideas as you‚Äôd see in Silicon Valley. Those moonshot ideas are the one‚Äôs that grow to be Facebook or Airbnb, and affect our lives in an outsized manner.&lt;/p&gt;

&lt;p&gt;As a person, it‚Äôs hard to say whether I would trade one for the other, but it‚Äôs always a fun thought experiment.&lt;/p&gt;

&lt;h4 id=&quot;youve-worked-both-for-companies-and-for-yourself--do-you-have-a-preference-what-are-the-advantages-and-disadvantages&quot;&gt;You‚Äôve worked both for companies and for yourself ‚Äì do you have a preference? What are the advantages and disadvantages?&lt;/h4&gt;

&lt;p&gt;Like everything in life, there‚Äôs pros and cons to everything. I don‚Äôt have a preference, and don‚Äôt think I‚Äôll always be a consultant, but don‚Äôt think I‚Äôll always work full time either.&lt;/p&gt;

&lt;p&gt;Being a consultant gives me work-life balance that‚Äôs hard to beat. It‚Äôs quite an opportunity to use the extra time I have to invest in my own learning. I can spend more time reading about product, design, management, or even things like metacognition, which help me grow in my career.&lt;/p&gt;

&lt;p&gt;On the other hand there are some skills you can learn at a company over the long term. I still work at and with companies, but being with a company for a while helps you develop different skills.&lt;/p&gt;

&lt;p&gt;I tend to think of it as growing in a breadth-first manner vs. a depth-first manner. Both will likely get you to the place you want to be, but the path will look different. Ultimately what works best for you is in your hands.&lt;/p&gt;

&lt;h4 id=&quot;what-has-been-your-toughest-lesson-to-learn-in-your-software-career-so-far&quot;&gt;What has been your toughest lesson to learn in your software career so far?&lt;/h4&gt;

&lt;p&gt;I‚Äôd say the career matters. Developers often don‚Äôt want to think about their career, and instead think about programming. It makes sense because it takes a while to become comfortable enough to feel confident in what you‚Äôre doing, but as a result other people‚Äôs other skills suffer.&lt;/p&gt;

&lt;p&gt;I‚Äôve always been interested in product, design, and programming, so choosing a linear path was difficult for me. Nowadays I‚Äôm able to leverage those skills as a consultant and former startup founder. On the other hand, I hadn‚Äôt spent much time thinking about management or a career track until recently, and realized that I‚Äôve got little experience with that and now am playing catch up. Ultimately it may not matter because you can‚Äôt predict your future, but it is very important to be in touch with your goals to move forward as much as possible, without parallel diversions.&lt;/p&gt;

&lt;h4 id=&quot;what-would-be-your-number-one-piece-of-advice-for-a-successful-software-career&quot;&gt;What would be your number one piece of advice for a successful software career?&lt;/h4&gt;

&lt;p&gt;Everyone starts at the beginning and there‚Äôs no way around it. Luckily, that‚Äôs ok. Over the first few years of my software career I read anything programming related in sight that sounded interesting. Even if it didn‚Äôt pertain to what I was currently working on, I would still read it. That ended up paying dividends as I started to expand my horizons. Even though I didn‚Äôt understand it all, I had all this knowledge tucked away in the back of my brain for a later day.&lt;/p&gt;

&lt;p&gt;When it was time for me to try my hand at Python, I didn‚Äôt need to start from scratch. When I wanted to build a website, it was as easy as recalling that tutorial I read a month ago. Better yet, I took the lessons I learned in other languages and frameworks, and applied them to what I was working on as I saw fit. This allowed me to grow in ways that my peers weren‚Äôt, and made a more confident programmer.&lt;/p&gt;

&lt;p&gt;While this technique worked for me, I can‚Äôt promise it will work for everyone. Everyone learns differently, and you have to find your path. What I will suggest though is trying it out and seeing if it works for you! Maybe it won‚Äôt be the only way you grow, but it can be another tool in your toolbelt.&lt;/p&gt;

&lt;h4 id=&quot;what-programming-skill-do-you-think-is-underrated&quot;&gt;What programming skill do you think is underrated?&lt;/h4&gt;

&lt;p&gt;There are two personality traits which go hand in hand. Empathy and modesty can take you from being a good programmer to being a good teammate. Being a good teammate can transform you into a great asset. If you apply these traits, you‚Äôll more easily accept your flaws, and that will empower you to your co-workers and fellow community members.&lt;/p&gt;

&lt;p&gt;One underrated aspect of empathy and modesty is that over time you become more confident and humble. Confidence and humility allow you to turn anything into a learning opportunity. The more you can say ‚ÄúI don‚Äôt know, but I want to learn about it‚Äù either to yourself or to a peer, the more you‚Äôll open yourself up to an opportunity to grow. Over time it will become an innate part of how you approach solving problems.&lt;/p&gt;

&lt;h4 id=&quot;what-booksresources-would-you-recommend&quot;&gt;What books/resources would you recommend?&lt;/h4&gt;

&lt;p&gt;I‚Äôm going to be a little self-serving here, but I maintain a &lt;a href=&quot;https://pinboard.in/u:mergesort/t:learn-programming&quot;&gt;Pinboard tag&lt;/a&gt; where I post articles. The articles are ones that I‚Äôve come across in my career that taught me something, with information I wish I knew when I was just starting out as a programmer. Sometimes I go back and re-read the articles, and I‚Äôll still pick up new things. As I‚Äôve grown, the advice and stories take on new life and new meaning.&lt;/p&gt;

&lt;p&gt;I recommend going through the posts in reverse order. The first posts are more foundational and encourage bigger thinking. I‚Äôm really big on RSS, so I recommend subscribing to the &lt;a href=&quot;https://feeds.pinboard.in/rss/u:mergesort/t:learn-programming/&quot;&gt;feed&lt;/a&gt;, so that way you can always get a new article right after it‚Äôs posted.&lt;/p&gt;

&lt;h4 id=&quot;finally-make-your-shoutout-what-would-you-like-the-readers-to-go-have-a-look-at&quot;&gt;Finally, make your shoutout! What would you like the readers to go have a look at?&lt;/h4&gt;

&lt;p&gt;I think right now it‚Äôs important to not forget about others in need. There are people dealing with natural disasters that have entirely uprooted people‚Äôs lives. A cause that‚Äôs near and dear to my heart is the &lt;a href=&quot;http://hispanicfederation.org/unidos/&quot;&gt;Hispanic Federation&lt;/a&gt;, where every dollar will go to aid on the ground in Puerto Rico. You can choose your own cause, but the important thing is to do something.&lt;/p&gt;

&lt;p&gt;Personally you can find me on &lt;a href=&quot;http://twitter.com/mergesort&quot;&gt;Twitter&lt;/a&gt; where I am busy saying anything that comes into my head, so my apologies in advance.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="industry" /><category term="iOS" /><category term="productivity" /><category term="programming" /><summary type="html">Introduce yourself! Who are you? Where do you work?</summary></entry><entry><title type="html">Why Tech Startups Have Overly Large Mobile Teams - A Thread</title><link href="http://localhost:4000/2017/05/05/why-tech-startups-have-overly-large-mobile-teams/" rel="alternate" type="text/html" title="Why Tech Startups Have Overly Large Mobile Teams - A Thread" /><published>2017-05-05T00:00:00-04:00</published><updated>2017-05-05T00:00:00-04:00</updated><id>http://localhost:4000/2017/05/05/why-tech-startups-have-overly-large-mobile-teams</id><content type="html" xml:base="http://localhost:4000/2017/05/05/why-tech-startups-have-overly-large-mobile-teams/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583644074835969?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583646385885184?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583651653955584?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583655416188928?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583661401460736?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583667269349376?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583670800941056?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583677520117760?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583683669053446?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583689901748224?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/860583929660747776?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="apple" /><category term="go" /><category term="iOS" /><category term="featured" /><category term="industry" /><category term="life-events" /><category term="productivity" /><category term="programming" /><category term="society" /><category term="swift" /><summary type="html">1) Bad reasons why tech startups have incredibly large mobile teams even though from an engineering perspective they don‚Äôt need it.&amp;mdash; Joe Fabisevich üê∂üêØüáµüá∑üê±üê≥‚Ñ¢ (@mergesort) May 5, 2017</summary></entry><entry><title type="html">Debugging shortcuts for UIKeyCommand</title><link href="http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand/" rel="alternate" type="text/html" title="Debugging shortcuts for UIKeyCommand" /><published>2017-04-02T00:00:00-04:00</published><updated>2017-04-02T00:00:00-04:00</updated><id>http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand</id><content type="html" xml:base="http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand/">&lt;p&gt;I recently re-discovered &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyCommand&lt;/code&gt; while listening to &lt;a href=&quot;undefined&quot;&gt;Caleb Davenport&lt;/a&gt;‚Äôs, &lt;a href=&quot;https://overcast.fm/+GuhgtcBa4&quot;&gt;podcast&lt;/a&gt;, Runtime. He‚Äôs also got a &lt;a href=&quot;https://calebd.me/posts/uikeycommand&quot;&gt;blog post&lt;/a&gt; which shows you exactly how simple it is to create &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyCommand&lt;/code&gt; shortcuts for your app.&lt;/p&gt;

&lt;p&gt;After reading that, I decided that it would be neat to implement them across my app, so I could also start navigating around my UI with lightning speed while I‚Äôm debugging in the simulator. I quickly realized that by using Swift extensions, I could automatically get these behaviors for free throughout our entire app.&lt;/p&gt;

&lt;p&gt;Below is a code snippet which you can drop into your app to help you speed up your workflow. With just one tap on your keyboard, you‚Äôll be able to pop a UIViewController from a navigation stack and dismiss any presented &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keyCommands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyInputLeftArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;modifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;popViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyInputDownArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;modifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismissViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;popViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;popViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dismissViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don‚Äôt forget, you can make your own default shortcuts too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy debugging!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="swift" /><category term="programming" /><category term="iOS" /><summary type="html">I recently re-discovered UIKeyCommand while listening to Caleb Davenport‚Äôs, podcast, Runtime. He‚Äôs also got a blog post which shows you exactly how simple it is to create UIKeyCommand shortcuts for your app.</summary></entry><entry><title type="html">WWDC 2016 ‚Äî My Fantasy Edition</title><link href="http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition/" rel="alternate" type="text/html" title="WWDC 2016 ‚Äî My Fantasy Edition" /><published>2016-06-10T00:00:00-04:00</published><updated>2016-06-10T00:00:00-04:00</updated><id>http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition</id><content type="html" xml:base="http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition/">&lt;p&gt;WWDC is right around the corner! This post isn‚Äôt intended to be a prediction, as much as what I hope unfolds.&lt;/p&gt;

&lt;p&gt;As Betrand Serlet, a former Apple engineer discussed in this 90 second video &lt;a href=&quot;https://www.youtube.com/watch?v=jd97us27eSg&quot;&gt;clip&lt;/a&gt;, Apple often ships features iteratively. Projects start off private, only to be used internally, often times for a year or two. When they feel stable enough, Apple opens them up to 3rd party developers, and makes it an official API. Features that are deemed noteworthy and successful continue to build on, while others are simply forgotten.&lt;/p&gt;

&lt;p&gt;The three technologies below have gone through this lifecycle the last few years, and I think they are ready to converge into a big way, changing how we use iOS every day.&lt;/p&gt;

&lt;h3 id=&quot;universal-links&quot;&gt;Universal Links&lt;/h3&gt;

&lt;p&gt;Since the first days of iOS, URL schemes were a way to take you from one app to another. You could provide some context with URLs like &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp://profile&lt;/code&gt;, but nothing more.&lt;/p&gt;

&lt;p&gt;Then iOS 8 finally began allowing developers to break out of apps. Apple started allowing developers to create extensions, little parts of your app that can run in another app.&lt;/p&gt;

&lt;p&gt;In iOS 9, Apple went even further down that route by adding Spotlight. This method of universal search combined with the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; API allowed a developer to define entry points into their app. Most importantly though, Apple introduced ‚Äòuniversal links‚Äô, real URLs like ones you‚Äôd find on the internet that would open a corresponding app instead of Safari. For example, if I sent you this Medium article in a text message and you had the app installed, it would open up in the Medium app, not a website. While a great idea, the implementation still left room for improvement, as users often get bounced into to an app without wanting or expecting to be.&lt;/p&gt;

&lt;h3 id=&quot;remote-view-controllers&quot;&gt;Remote View Controllers&lt;/h3&gt;

&lt;p&gt;If you‚Äôve ever been in an app and wanted to send an email, Apple provides a way to pull up the Mail app without leaving the app you‚Äôre currently in. Apple lets developers open up this Mail view (&lt;code class=&quot;highlighter-rouge&quot;&gt;MFMailComposeViewController&lt;/code&gt; for you nerds out there), to send messages from within another app. And so you have remote view controllers, screens from another app presented within your app.&lt;/p&gt;

&lt;p&gt;Currently, if you want an experience like this, you‚Äôd have to integrate an SDK or do a one-off partnership with a company. I think iOS 10 will finally bring this functionality to all 3rd party developers. Imagine how quickly you could post a tweet by pressing a tweet button within an app and having it present a Compose Tweet screen instead of opening the Twitter app. How about calling an Uber when you‚Äôre in Google Maps, Yelp, or Foursquare? The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Implementing this can be made especially simple if you can just piggy back off the universal links that we mentioned before. Add a URL, and if the user has the app installed, it will present in your app without them having to go anywhere.&lt;/p&gt;

&lt;h3 id=&quot;siri&quot;&gt;Siri&lt;/h3&gt;

&lt;p&gt;Having been a part of iOS for almost 5 years now, Siri has gone through a similar lifecycle as these other technologies. Initially, Siri was a concierge for Apple‚Äôs apps from setting reminders to making phone calls. Apple started adding additional partners like Yelp, Wikipedia, and HomeKit vendors. People have been saying it for years, and at this point the tech world is convinced that a Siri API is most certainly coming in iOS 10.&lt;/p&gt;

&lt;p&gt;I also believe Apple is ready to take this next step, and open it up to 3rd party developers. While I don‚Äôt think we will have the ability to add Siri functionality into our apps, I‚Äôm confident that we will be able to add our own app functionality into Siri. A likely implementation would be building queries that Siri can respond to by presenting the remote view controllers discussed above. Asking Siri to ‚Äúfind me an Italian restaurant‚Äù will pull up the remote view controller from Yelp, so you can satisfy those pasta cravings. Those who wish to dive into your app‚Äôs richer experience could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; API and deep links, to have Siri launch you into the app in the exact place you wanted.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether my fantasy becomes a reality, I think WWDC is going to be huge. I‚Äôm very excited, more so than I have been the last few years. If you see something like this Monday on stage at WWDC, I told you so. And if you don‚Äôt, then just remember I‚Äôve been wrong before, but that doesn‚Äôt mean I won‚Äôt be right some day. üòâ&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="iOS" /><category term="apple" /><category term="programming" /><summary type="html">WWDC is right around the corner! This post isn‚Äôt intended to be a prediction, as much as what I hope unfolds.</summary></entry><entry><title type="html">The Expressive Nature of Swift</title><link href="http://localhost:4000/2016/05/25/the-expressive-nature-of-swift/" rel="alternate" type="text/html" title="The Expressive Nature of Swift" /><published>2016-05-25T00:00:00-04:00</published><updated>2016-05-25T00:00:00-04:00</updated><id>http://localhost:4000/2016/05/25/the-expressive-nature-of-swift</id><content type="html" xml:base="http://localhost:4000/2016/05/25/the-expressive-nature-of-swift/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Ignores commenting on another static vs. dynamic dispatch article because people won‚Äôt accept Swift is a hybrid not plain static.&lt;/p&gt;&amp;mdash; Joe Fabisevich üê∂üê≥‚Ñ¢ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/735132240808706050&quot;&gt;May 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Guess that didn‚Äôt last long.&lt;/p&gt;

&lt;p&gt;There‚Äôs a &lt;a href=&quot;http://khanlou.com/2016/05/six-months-of-swift/&quot;&gt;conversation&lt;/a&gt; &lt;a href=&quot;http://chris.eidhof.nl/post/dynamic-swift/&quot;&gt;happening&lt;/a&gt; &lt;a href=&quot;https://twitter.com/wilshipley/status/735609509993807873&quot;&gt;in&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2016/05/25/oldie_complains_about_the_old_old_ways&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://www.noodlesoft.com/blog/2016/05/23/on-dynamism/&quot;&gt;iOS&lt;/a&gt; &lt;a href=&quot;http://bitsplitting.org/2016/05/24/not-perfected-here/&quot;&gt;community&lt;/a&gt; &lt;a href=&quot;http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html&quot;&gt;at&lt;/a&gt; &lt;a href=&quot;http://blog.metaobject.com/2016/05/what-missing-in-discussion-about.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://shapeof.com/archives/2016/5/dynamic_swift.html&quot;&gt;moment&lt;/a&gt;, &lt;a href=&quot;https://ashfurrow.com/blog/adulterated-objective-c/&quot;&gt;static&lt;/a&gt; vs. &lt;a href=&quot;http://inessential.com/2016/05/15/the_case_for_dynamic-swift_optimism&quot;&gt;dynamic&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2016/05/14/the_tension_of_swift&quot;&gt;programming&lt;/a&gt;. On one side we have many people who have been writing Objective-C for over 20 years (wow!) saying that the dynamism of Objective-C is the reason why it is an amazing language, and has succeeded. The argument is predicated on the fact that those nay-saying it don‚Äôt understand the power of dynamism, and how it‚Äôs empowered programmers. On the other end you have many people saying that static languages are the way forward, and that a whole class of errors is avoided, and that we should look at all the bugs prevented by having a good type system!&lt;/p&gt;

&lt;p&gt;This back and forth ignores that Chris Lattner, the creator of Swift, has himself stated that &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001948.html&quot;&gt;Swift is a hybrid,&lt;/a&gt; not explicitly static or dynamic. His explanation is very interesting, because it takes the argument from being black vs. white and turns it into many gray shades. Other languages have explored these concepts before, with ideas like &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradual_typing&quot;&gt;gradual typing&lt;/a&gt;, which was born out of the idea of grafting a type system onto dynamic languages, not making static languages more expressive.&lt;/p&gt;

&lt;p&gt;But what exactly is expressiveness? As this &lt;a href=&quot;https://stackoverflow.com/questions/638881/what-does-expressive-mean-when-referring-to-programming-languages&quot;&gt;StackOverflow post&lt;/a&gt; explains (always cite your StackOverflow posts kids):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;‚ÄòExpressive‚Äô means that it‚Äôs easy to write code that‚Äôs easy to understand, both for the compiler and for a human reader.&lt;br /&gt;&lt;br /&gt;
Two factors that make for expressiveness:&lt;br /&gt;&lt;br /&gt;
‚Ä¢ Intuitively readable constructs&lt;br /&gt;
‚Ä¢ Lack of boilerplate code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Peter Norvig has a &lt;a href=&quot;https://norvig.com/design-patterns/design-patterns.pdf&quot;&gt;great talk&lt;/a&gt; on design patterns in programming languages. One slide stuck out to me as I was reading it recently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/design-patterns-norvig.png&quot; alt=&quot;Design Patterns by Peter Norvig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs break that down:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are fewer design patterns in expressive languages, because the type system does not prevent programmers from trying to express a concept.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamic languages by their very nature of a weak type system have less issue being expressive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This does not rule out static languages from being expressive!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The lack of expressiveness of static languages is dogma attached from other static languages that have existed before. I‚Äôd argue that Go is as expressive as Python, and Swift, even in its incomplete state, is nearly as expressive as many dynamic languages. You can recreate the advantages Objective-C offers through its dynamic nature by using different expressive techniques, like protocols and generics, in a statically typed language.&lt;/p&gt;

&lt;p&gt;One more thing: Many arguments imply that Apple hasn‚Äôt thought about writing apps, that they built a static language, and forgot to take into account. Care to tell me which company writes apps on the most iPhones in the world? That‚Äôs right, Apple. I don‚Äôt think they‚Äôre stupid enough to create a language which they believe is objectively worse for writing apps.&lt;/p&gt;

&lt;p&gt;Regardless of how this whole static vs. dynamic ‚Äúconversation‚Äù turns out, one thing‚Äôs for certain, I‚Äôm #TeamSwift.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="swift" /><category term="programming" /><category term="iOS" /><summary type="html">Ignores commenting on another static vs. dynamic dispatch article because people won‚Äôt accept Swift is a hybrid not plain static.&amp;mdash; Joe Fabisevich üê∂üê≥‚Ñ¢ (@mergesort) May 24, 2016</summary></entry><entry><title type="html">You Can‚Äôt Do It All</title><link href="http://localhost:4000/2016/05/24/you-cant-do-it-all/" rel="alternate" type="text/html" title="You Can‚Äôt Do It All" /><published>2016-05-24T00:00:00-04:00</published><updated>2016-05-24T00:00:00-04:00</updated><id>http://localhost:4000/2016/05/24/you-cant-do-it-all</id><content type="html" xml:base="http://localhost:4000/2016/05/24/you-cant-do-it-all/">&lt;p&gt;At the original iPhone announcement, we saw &lt;a href=&quot;https://www.youtube.com/watch?v=bd6dQmN-mPw&quot;&gt;Steve Jobs on stage&lt;/a&gt; with Google‚Äôs then CEO Eric Schmidt, showing off Google‚Äôs amazing Maps. Built for the iPhone, it was something we‚Äôd never seen before. Apple‚Äôs incredible phone and revolutionary software combined with Google‚Äôs terrific web services and data coming together for one amazing product. With regards to collaboration, it‚Äôs all been downhill from there. Since then, every tech company has focused on owning the whole experience.&lt;/p&gt;

&lt;p&gt;Apple, Google, Amazon, Microsoft, and Facebook. These companies all excel at some things, and have attempted to leverage that into more. Apple understands user experience and hardware. Google gets web and machine learning like no other company. Amazon is the best at logistics and commerce. Microsoft‚Äôs productivity and enterprise know-how guides them to success. Facebook has little competition when it comes to figuring out consumer behavior.&lt;/p&gt;

&lt;p&gt;In the mobile era, each of those companies has tried to make the widget, sell it, and reap all of its rewards. But this has never worked. Amazon bought a mobile mapping company. Apple has tried to copy Microsoft Office. Google has made not one but two OS‚Äôs, a social network, and probably eight messaging apps, I‚Äôve honestly lost count. And the list goes on.&lt;/p&gt;

&lt;p&gt;The Roman empire fell because it was too large to maintain (sure, there are other reasons too‚Ä¶ but let‚Äôs move on). No company can be the best at everything, and the quicker some companies realize that, the more handsomely they will be rewarded with opportunities to partner with others.&lt;/p&gt;

&lt;p&gt;In programming, we have the concept of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;Unix philosophy&lt;/a&gt;. It‚Äôs the idea that you build a large and complex program by combining many single-task apps that do one thing, and do it well. Unfortunately that runs in contrast to what we‚Äôve seen in the tech world, because that‚Äôs not what the landscape encourages. The Unix philosophy is as close as we‚Äôve come to a successful implementation of communism, and there‚Äôs no way that‚Äôs happening. We‚Äôve seen it work with things like federated messaging and interoperating protocols, but none have lasted long enough before a company tries to create an integrated experience around open standards.&lt;/p&gt;

&lt;p&gt;It‚Äôs hard for one company to excel at user experience, hardware, machine learning, web services, enterprise, social, and more, when each of those has different incentives, customers, and end users. If there‚Äôs anything that is Apple‚Äôs (or anyone‚Äôs) ultimate demise, it‚Äôll be spreading itself so thin across what the company does, that they won‚Äôt be able to fight the war on all fronts.&lt;/p&gt;

&lt;p&gt;As the saying goes, ‚Äúthe enemy of my enemy is my friend.‚Äù In the past we‚Äôve seen companies partner together to take on one competitor. It‚Äôs not as black and white as Google hates Apple, and Apple hates Google. It can‚Äôt be when Google is &lt;a href=&quot;https://www.bloomberg.com/news/articles/2016-01-22/google-paid-apple-1-billion-to-keep-search-bar-on-iphone&quot;&gt;paying a billion dollars&lt;/a&gt; to Apple every year to be the default search engine, and when &lt;a href=&quot;http://www.itworldcanada.com/article/why-ios-makes-more-money-for-google-than-android-does/46151&quot;&gt;iOS is more profitable&lt;/a&gt; to them than Android. It‚Äôs more like Apple uses Google when it‚Äôs &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.apple.android.music&amp;amp;hl=en&quot;&gt;opportune&lt;/a&gt;, and Google uses Apple when it‚Äôs in their &lt;a href=&quot;https://itunes.apple.com/us/app/gboard-search.-gifs.-emojis/id1091700242?mt=8&quot;&gt;best interest&lt;/a&gt;. Politics make strange bedfellows.&lt;/p&gt;

&lt;p&gt;The only reason I‚Äôve become a bit bearish (just a bit) on Apple is that they‚Äôve yet to prove to me that they can own the user experience and have the expertise necessary to excel in all the domains they‚Äôre entering. But I‚Äôm a man who loves to be proven wrong, and they‚Äôre a company whose proven doubters wrong many times over.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="industry" /><summary type="html">At the original iPhone announcement, we saw Steve Jobs on stage with Google‚Äôs then CEO Eric Schmidt, showing off Google‚Äôs amazing Maps. Built for the iPhone, it was something we‚Äôd never seen before. Apple‚Äôs incredible phone and revolutionary software combined with Google‚Äôs terrific web services and data coming together for one amazing product. With regards to collaboration, it‚Äôs all been downhill from there. Since then, every tech company has focused on owning the whole experience.</summary></entry><entry><title type="html">Comparing Shyp to Time Warner</title><link href="http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner/" rel="alternate" type="text/html" title="Comparing Shyp to Time Warner" /><published>2015-04-06T00:00:00-04:00</published><updated>2015-04-06T00:00:00-04:00</updated><id>http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner</id><content type="html" xml:base="http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner/">&lt;p&gt;I pushed the magic button to get a Shyp person here to send out a couple packages I have been procrastinating sending for weeks. After that was settled, I dialed up Time Warner Cable, to get my modem swapped out, a process I‚Äôve been actively trying to get done for weeks.&lt;/p&gt;

&lt;p&gt;After a combination of pushing buttons and yelling ‚Äútech support‚Äù into the phone for 10 minutes to get me to the right place, I finally got a real life human on. I won‚Äôt bore you with the details, but half way through my call I got a call from the Shyp guy to tell me he was downstairs, and wanted to come up. I told him sorry, I was on the phone with Time Warner, but he didn‚Äôt seem to mind, and 60 seconds later I had given him my stuff and had gotten back my tracking number. Another 10 minutes later and 2 hold‚Äôs later I was off the phone with Time Warner.&lt;/p&gt;

&lt;p&gt;Guess which company I liked dealing with more?&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="life-events" /><summary type="html">I pushed the magic button to get a Shyp person here to send out a couple packages I have been procrastinating sending for weeks. After that was settled, I dialed up Time Warner Cable, to get my modem swapped out, a process I‚Äôve been actively trying to get done for weeks.</summary></entry><entry><title type="html">The Apple Watch and Luxury</title><link href="http://localhost:4000/2015/03/16/the-apple-watch-and-luxury/" rel="alternate" type="text/html" title="The Apple Watch and Luxury" /><published>2015-03-16T00:00:00-04:00</published><updated>2015-03-16T00:00:00-04:00</updated><id>http://localhost:4000/2015/03/16/the-apple-watch-and-luxury</id><content type="html" xml:base="http://localhost:4000/2015/03/16/the-apple-watch-and-luxury/">&lt;p&gt;Just leaving this here for later, feel free to call me out on it if I‚Äôm wrong.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The Ô£øWatch isn‚Äôt about Apple selling luxury products, it‚Äôs about making something nice looking enough that you‚Äôll actually wear it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="apple" /><summary type="html">Just leaving this here for later, feel free to call me out on it if I‚Äôm wrong.</summary></entry></feed>