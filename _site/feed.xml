<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2017-12-11T12:38:03-05:00</updated><id>http://localhost:4000/</id><title type="html">Fabisevi.ch</title><subtitle>iOS Developer &amp; Design Contractor
</subtitle><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><entry><title type="html">Foundations</title><link href="http://localhost:4000/2017/11/07/foundations/" rel="alternate" type="text/html" title="Foundations" /><published>2017-11-07T00:00:00-05:00</published><updated>2017-11-07T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/07/foundations</id><content type="html" xml:base="http://localhost:4000/2017/11/07/foundations/">&lt;p&gt;Every day at a startup is an exercise in getting to tomorrow. Some days it’s easier, some days it’s harder, but if you don’t make it until tomorrow, there won’t be a next week, month, or year.&lt;/p&gt;

&lt;p&gt;This is why building a long-term foundation is incredibly important. If you keep making it to tomorrow without thinking ahead, in three years you might look at what you’ve built and realize that you’ve set yourself up for mediocrity or failure.&lt;/p&gt;

&lt;p&gt;Every decision you make today is implicitly a decision you’ve made for the next few years. There’s a question of whether you’ll make it that far, and you can always change course from your decisions (and you should!), but it’s not without cost.&lt;/p&gt;

&lt;p&gt;Stop thinking about how to build a company that lasts, start thinking about how to build a great company that lasts. Start making decisions today that will help you build a great company. Because down the road you might look back and realize that your company isn’t that great after all.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="industry" /><summary type="html">Every day at a startup is an exercise in getting to tomorrow. Some days it’s easier, some days it’s harder, but if you don’t make it until tomorrow, there won’t be a next week, month, or year.</summary></entry><entry><title type="html">Debugging shortcuts for UIKeyCommand</title><link href="http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand/" rel="alternate" type="text/html" title="Debugging shortcuts for UIKeyCommand" /><published>2017-04-02T00:00:00-04:00</published><updated>2017-04-02T00:00:00-04:00</updated><id>http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand</id><content type="html" xml:base="http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand/">&lt;p&gt;I recently re-discovered &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyCommand&lt;/code&gt; while listening to &lt;a href=&quot;undefined&quot;&gt;Caleb Davenport&lt;/a&gt;’s, &lt;a href=&quot;https://overcast.fm/+GuhgtcBa4&quot;&gt;podcast&lt;/a&gt;, Runtime. He’s also got a &lt;a href=&quot;https://calebd.me/posts/uikeycommand&quot;&gt;blog post&lt;/a&gt; which shows you exactly how simple it is to create &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyCommand&lt;/code&gt; shortcuts for your app.&lt;/p&gt;

&lt;p&gt;After reading that, I decided that it would be neat to implement them across my app, so I could also start navigating around my UI with lightning speed while I’m debugging in the simulator. I quickly realized that by using Swift extensions, I could automatically get these behaviors for free throughout our entire app.&lt;/p&gt;

&lt;p&gt;Below is a code snippet which you can drop into your app to help you speed up your workflow. With just one tap on your keyboard, you’ll be able to pop a UIViewController from a navigation stack and dismiss any presented &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keyCommands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyInputLeftArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;modifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;popViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyInputDownArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;modifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismissViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;popViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;popViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dismissViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget, you can make your own default shortcuts too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy debugging!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="swift" /><category term="programming" /><category term="iOS" /><summary type="html">I recently re-discovered UIKeyCommand while listening to Caleb Davenport’s, podcast, Runtime. He’s also got a blog post which shows you exactly how simple it is to create UIKeyCommand shortcuts for your app.</summary></entry><entry><title type="html">WWDC 2016 — My Fantasy Edition</title><link href="http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition/" rel="alternate" type="text/html" title="WWDC 2016 — My Fantasy Edition" /><published>2016-06-10T00:00:00-04:00</published><updated>2016-06-10T00:00:00-04:00</updated><id>http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition</id><content type="html" xml:base="http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition/">&lt;p&gt;WWDC is right around the corner! This post isn’t intended to be a prediction, as much as what I hope unfolds.&lt;/p&gt;

&lt;p&gt;As Betrand Serlet, a former Apple engineer discussed in this 90 second video &lt;a href=&quot;https://www.youtube.com/watch?v=jd97us27eSg&quot;&gt;clip&lt;/a&gt;, Apple often ships features iteratively. Projects start off private, only to be used internally, often times for a year or two. When they feel stable enough, Apple opens them up to 3rd party developers, and makes it an official API. Features that are deemed noteworthy and successful continue to build on, while others are simply forgotten.&lt;/p&gt;

&lt;p&gt;The three technologies below have gone through this lifecycle the last few years, and I think they are ready to converge into a big way, changing how we use iOS every day.&lt;/p&gt;

&lt;h3 id=&quot;universal-links&quot;&gt;Universal Links&lt;/h3&gt;

&lt;p&gt;Since the first days of iOS, URL schemes were a way to take you from one app to another. You could provide some context with URLs like &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp://profile&lt;/code&gt;, but nothing more.&lt;/p&gt;

&lt;p&gt;Then iOS 8 finally began allowing developers to break out of apps. Apple started allowing developers to create extensions, little parts of your app that can run in another app.&lt;/p&gt;

&lt;p&gt;In iOS 9, Apple went even further down that route by adding Spotlight. This method of universal search combined with the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; API allowed a developer to define entry points into their app. Most importantly though, Apple introduced ‘universal links’, real URLs like ones you’d find on the internet that would open a corresponding app instead of Safari. For example, if I sent you this Medium article in a text message and you had the app installed, it would open up in the Medium app, not a website. While a great idea, the implementation still left room for improvement, as users often get bounced into to an app without wanting or expecting to be.&lt;/p&gt;

&lt;h3 id=&quot;remote-view-controllers&quot;&gt;Remote View Controllers&lt;/h3&gt;

&lt;p&gt;If you’ve ever been in an app and wanted to send an email, Apple provides a way to pull up the Mail app without leaving the app you’re currently in. Apple lets developers open up this Mail view (&lt;code class=&quot;highlighter-rouge&quot;&gt;MFMailComposeViewController&lt;/code&gt; for you nerds out there), to send messages from within another app. And so you have remote view controllers, screens from another app presented within your app.&lt;/p&gt;

&lt;p&gt;Currently, if you want an experience like this, you’d have to integrate an SDK or do a one-off partnership with a company. I think iOS 10 will finally bring this functionality to all 3rd party developers. Imagine how quickly you could post a tweet by pressing a tweet button within an app and having it present a Compose Tweet screen instead of opening the Twitter app. How about calling an Uber when you’re in Google Maps, Yelp, or Foursquare? The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Implementing this can be made especially simple if you can just piggy back off the universal links that we mentioned before. Add a URL, and if the user has the app installed, it will present in your app without them having to go anywhere.&lt;/p&gt;

&lt;h3 id=&quot;siri&quot;&gt;Siri&lt;/h3&gt;

&lt;p&gt;Having been a part of iOS for almost 5 years now, Siri has gone through a similar lifecycle as these other technologies. Initially, Siri was a concierge for Apple’s apps from setting reminders to making phone calls. Apple started adding additional partners like Yelp, Wikipedia, and HomeKit vendors. People have been saying it for years, and at this point the tech world is convinced that a Siri API is most certainly coming in iOS 10.&lt;/p&gt;

&lt;p&gt;I also believe Apple is ready to take this next step, and open it up to 3rd party developers. While I don’t think we will have the ability to add Siri functionality into our apps, I’m confident that we will be able to add our own app functionality into Siri. A likely implementation would be building queries that Siri can respond to by presenting the remote view controllers discussed above. Asking Siri to “find me an Italian restaurant” will pull up the remote view controller from Yelp, so you can satisfy those pasta cravings. Those who wish to dive into your app’s richer experience could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; API and deep links, to have Siri launch you into the app in the exact place you wanted.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether my fantasy becomes a reality, I think WWDC is going to be huge. I’m very excited, more so than I have been the last few years. If you see something like this Monday on stage at WWDC, I told you so. And if you don’t, then just remember I’ve been wrong before, but that doesn’t mean I won’t be right some day. 😉&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="iOS" /><category term="apple" /><category term="programming" /><summary type="html">WWDC is right around the corner! This post isn’t intended to be a prediction, as much as what I hope unfolds.</summary></entry><entry><title type="html">The Expressive Nature of Swift</title><link href="http://localhost:4000/2016/05/25/the-expressive-nature-of-swift/" rel="alternate" type="text/html" title="The Expressive Nature of Swift" /><published>2016-05-25T00:00:00-04:00</published><updated>2016-05-25T00:00:00-04:00</updated><id>http://localhost:4000/2016/05/25/the-expressive-nature-of-swift</id><content type="html" xml:base="http://localhost:4000/2016/05/25/the-expressive-nature-of-swift/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Ignores commenting on another static vs. dynamic dispatch article because people won’t accept Swift is a hybrid not plain static.&lt;/p&gt;&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/735132240808706050&quot;&gt;May 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Guess that didn’t last long.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;http://khanlou.com/2016/05/six-months-of-swift/&quot;&gt;conversation&lt;/a&gt; &lt;a href=&quot;http://chris.eidhof.nl/post/dynamic-swift/&quot;&gt;happening&lt;/a&gt; &lt;a href=&quot;https://twitter.com/wilshipley/status/735609509993807873&quot;&gt;in&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2016/05/25/oldie_complains_about_the_old_old_ways&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://www.noodlesoft.com/blog/2016/05/23/on-dynamism/&quot;&gt;iOS&lt;/a&gt; &lt;a href=&quot;http://bitsplitting.org/2016/05/24/not-perfected-here/&quot;&gt;community&lt;/a&gt; &lt;a href=&quot;http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html&quot;&gt;at&lt;/a&gt; &lt;a href=&quot;http://blog.metaobject.com/2016/05/what-missing-in-discussion-about.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://shapeof.com/archives/2016/5/dynamic_swift.html&quot;&gt;moment&lt;/a&gt;, &lt;a href=&quot;https://ashfurrow.com/blog/adulterated-objective-c/&quot;&gt;static&lt;/a&gt; vs. &lt;a href=&quot;http://inessential.com/2016/05/15/the_case_for_dynamic-swift_optimism&quot;&gt;dynamic&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2016/05/14/the_tension_of_swift&quot;&gt;programming&lt;/a&gt;. On one side we have many people who have been writing Objective-C for over 20 years (wow!) saying that the dynamism of Objective-C is the reason why it is an amazing language, and has succeeded. The argument is predicated on the fact that those nay-saying it don’t understand the power of dynamism, and how it’s empowered programmers. On the other end you have many people saying that static languages are the way forward, and that a whole class of errors is avoided, and that we should look at all the bugs prevented by having a good type system!&lt;/p&gt;

&lt;p&gt;This back and forth ignores that Chris Lattner, the creator of Swift, has himself stated that &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001948.html&quot;&gt;Swift is a hybrid,&lt;/a&gt; not explicitly static or dynamic. His explanation is very interesting, because it takes the argument from being black vs. white and turns it into many gray shades. Other languages have explored these concepts before, with ideas like &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradual_typing&quot;&gt;gradual typing&lt;/a&gt;, which was born out of the idea of grafting a type system onto dynamic languages, not making static languages more expressive.&lt;/p&gt;

&lt;p&gt;But what exactly is expressiveness? As this &lt;a href=&quot;https://stackoverflow.com/questions/638881/what-does-expressive-mean-when-referring-to-programming-languages&quot;&gt;StackOverflow post&lt;/a&gt; explains (always cite your StackOverflow posts kids):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;‘Expressive’ means that it’s easy to write code that’s easy to understand, both for the compiler and for a human reader.&lt;br /&gt;&lt;br /&gt;
Two factors that make for expressiveness:&lt;br /&gt;&lt;br /&gt;
• Intuitively readable constructs&lt;br /&gt;
• Lack of boilerplate code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Peter Norvig has a &lt;a href=&quot;https://norvig.com/design-patterns/design-patterns.pdf&quot;&gt;great talk&lt;/a&gt; on design patterns in programming languages. One slide stuck out to me as I was reading it recently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/design-patterns-norvig.png&quot; alt=&quot;Design Patterns by Peter Norvig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s break that down:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are fewer design patterns in expressive languages, because the type system does not prevent programmers from trying to express a concept.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamic languages by their very nature of a weak type system have less issue being expressive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This does not rule out static languages from being expressive!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The lack of expressiveness of static languages is dogma attached from other static languages that have existed before. I’d argue that Go is as expressive as Python, and Swift, even in its incomplete state, is nearly as expressive as many dynamic languages. You can recreate the advantages Objective-C offers through its dynamic nature by using different expressive techniques, like protocols and generics, in a statically typed language.&lt;/p&gt;

&lt;p&gt;One more thing: Many arguments imply that Apple hasn’t thought about writing apps, that they built a static language, and forgot to take into account. Care to tell me which company writes apps on the most iPhones in the world? That’s right, Apple. I don’t think they’re stupid enough to create a language which they believe is objectively worse for writing apps.&lt;/p&gt;

&lt;p&gt;Regardless of how this whole static vs. dynamic “conversation” turns out, one thing’s for certain, I’m #TeamSwift.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="swift" /><category term="programming" /><category term="iOS" /><summary type="html">Ignores commenting on another static vs. dynamic dispatch article because people won’t accept Swift is a hybrid not plain static.&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) May 24, 2016</summary></entry><entry><title type="html">You Can’t Do It All</title><link href="http://localhost:4000/2016/05/24/you-cant-do-it-all/" rel="alternate" type="text/html" title="You Can’t Do It All" /><published>2016-05-24T00:00:00-04:00</published><updated>2016-05-24T00:00:00-04:00</updated><id>http://localhost:4000/2016/05/24/you-cant-do-it-all</id><content type="html" xml:base="http://localhost:4000/2016/05/24/you-cant-do-it-all/">&lt;p&gt;At the original iPhone announcement, we saw &lt;a href=&quot;https://www.youtube.com/watch?v=bd6dQmN-mPw&quot;&gt;Steve Jobs on stage&lt;/a&gt; with Google’s then CEO Eric Schmidt, showing off Google’s amazing Maps. Built for the iPhone, it was something we’d never seen before. Apple’s incredible phone and revolutionary software combined with Google’s terrific web services and data coming together for one amazing product. With regards to collaboration, it’s all been downhill from there. Since then, every tech company has focused on owning the whole experience.&lt;/p&gt;

&lt;p&gt;Apple, Google, Amazon, Microsoft, and Facebook. These companies all excel at some things, and have attempted to leverage that into more. Apple understands user experience and hardware. Google gets web and machine learning like no other company. Amazon is the best at logistics and commerce. Microsoft’s productivity and enterprise know-how guides them to success. Facebook has little competition when it comes to figuring out consumer behavior.&lt;/p&gt;

&lt;p&gt;In the mobile era, each of those companies has tried to make the widget, sell it, and reap all of its rewards. But this has never worked. Amazon bought a mobile mapping company. Apple has tried to copy Microsoft Office. Google has made not one but two OS’s, a social network, and probably eight messaging apps, I’ve honestly lost count. And the list goes on.&lt;/p&gt;

&lt;p&gt;The Roman empire fell because it was too large to maintain (sure, there are other reasons too… but let’s move on). No company can be the best at everything, and the quicker some companies realize that, the more handsomely they will be rewarded with opportunities to partner with others.&lt;/p&gt;

&lt;p&gt;In programming, we have the concept of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;Unix philosophy&lt;/a&gt;. It’s the idea that you build a large and complex program by combining many single-task apps that do one thing, and do it well. Unfortunately that runs in contrast to what we’ve seen in the tech world, because that’s not what the landscape encourages. The Unix philosophy is as close as we’ve come to a successful implementation of communism, and there’s no way that’s happening. We’ve seen it work with things like federated messaging and interoperating protocols, but none have lasted long enough before a company tries to create an integrated experience around open standards.&lt;/p&gt;

&lt;p&gt;It’s hard for one company to excel at user experience, hardware, machine learning, web services, enterprise, social, and more, when each of those has different incentives, customers, and end users. If there’s anything that is Apple’s (or anyone’s) ultimate demise, it’ll be spreading itself so thin across what the company does, that they won’t be able to fight the war on all fronts.&lt;/p&gt;

&lt;p&gt;As the saying goes, “the enemy of my enemy is my friend.” In the past we’ve seen companies partner together to take on one competitor. It’s not as black and white as Google hates Apple, and Apple hates Google. It can’t be when Google is &lt;a href=&quot;https://www.bloomberg.com/news/articles/2016-01-22/google-paid-apple-1-billion-to-keep-search-bar-on-iphone&quot;&gt;paying a billion dollars&lt;/a&gt; to Apple every year to be the default search engine, and when &lt;a href=&quot;http://www.itworldcanada.com/article/why-ios-makes-more-money-for-google-than-android-does/46151&quot;&gt;iOS is more profitable&lt;/a&gt; to them than Android. It’s more like Apple uses Google when it’s &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.apple.android.music&amp;amp;hl=en&quot;&gt;opportune&lt;/a&gt;, and Google uses Apple when it’s in their &lt;a href=&quot;https://itunes.apple.com/us/app/gboard-search.-gifs.-emojis/id1091700242?mt=8&quot;&gt;best interest&lt;/a&gt;. Politics make strange bedfellows.&lt;/p&gt;

&lt;p&gt;The only reason I’ve become a bit bearish (just a bit) on Apple is that they’ve yet to prove to me that they can own the user experience and have the expertise necessary to excel in all the domains they’re entering. But I’m a man who loves to be proven wrong, and they’re a company whose proven doubters wrong many times over.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="industry" /><summary type="html">At the original iPhone announcement, we saw Steve Jobs on stage with Google’s then CEO Eric Schmidt, showing off Google’s amazing Maps. Built for the iPhone, it was something we’d never seen before. Apple’s incredible phone and revolutionary software combined with Google’s terrific web services and data coming together for one amazing product. With regards to collaboration, it’s all been downhill from there. Since then, every tech company has focused on owning the whole experience.</summary></entry><entry><title type="html">Comparing Shyp to Time Warner</title><link href="http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner/" rel="alternate" type="text/html" title="Comparing Shyp to Time Warner" /><published>2015-04-06T00:00:00-04:00</published><updated>2015-04-06T00:00:00-04:00</updated><id>http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner</id><content type="html" xml:base="http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner/">&lt;p&gt;I pushed the magic button to get a Shyp person here to send out a couple packages I have been procrastinating sending for weeks. After that was settled, I dialed up Time Warner Cable, to get my modem swapped out, a process I’ve been actively trying to get done for weeks.&lt;/p&gt;

&lt;p&gt;After a combination of pushing buttons and yelling “tech support” into the phone for 10 minutes to get me to the right place, I finally got a real life human on. I won’t bore you with the details, but half way through my call I got a call from the Shyp guy to tell me he was downstairs, and wanted to come up. I told him sorry, I was on the phone with Time Warner, but he didn’t seem to mind, and 60 seconds later I had given him my stuff and had gotten back my tracking number. Another 10 minutes later and 2 hold’s later I was off the phone with Time Warner.&lt;/p&gt;

&lt;p&gt;Guess which company I liked dealing with more?&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="life-events" /><summary type="html">I pushed the magic button to get a Shyp person here to send out a couple packages I have been procrastinating sending for weeks. After that was settled, I dialed up Time Warner Cable, to get my modem swapped out, a process I’ve been actively trying to get done for weeks.</summary></entry><entry><title type="html">The Apple Watch and Luxury</title><link href="http://localhost:4000/2015/03/16/the-apple-watch-and-luxury/" rel="alternate" type="text/html" title="The Apple Watch and Luxury" /><published>2015-03-16T00:00:00-04:00</published><updated>2015-03-16T00:00:00-04:00</updated><id>http://localhost:4000/2015/03/16/the-apple-watch-and-luxury</id><content type="html" xml:base="http://localhost:4000/2015/03/16/the-apple-watch-and-luxury/">&lt;p&gt;Just leaving this here for later, feel free to call me out on it if I’m wrong.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The Watch isn’t about Apple selling luxury products, it’s about making something nice looking enough that you’ll actually wear it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="apple" /><summary type="html">Just leaving this here for later, feel free to call me out on it if I’m wrong.</summary></entry><entry><title type="html">On Slow Programming</title><link href="http://localhost:4000/2014/12/02/slow-programming/" rel="alternate" type="text/html" title="On Slow Programming" /><published>2014-12-02T00:00:00-05:00</published><updated>2014-12-02T00:00:00-05:00</updated><id>http://localhost:4000/2014/12/02/slow-programming</id><content type="html" xml:base="http://localhost:4000/2014/12/02/slow-programming/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This has been a recurring theme for me in 2014. &lt;a href=&quot;https://t.co/H613AEUvwj&quot;&gt;https://t.co/H613AEUvwj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/539471344505999360&quot;&gt;December 1, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;People have asked how I make changes so quickly to my code, it&amp;#39;s because I&amp;#39;ve made it so it can be changed quickly.&lt;/p&gt;&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/539471443940347905&quot;&gt;December 1, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Build what you have to build, then make it more generic so you can use it again without the code gaining entropy.&lt;/p&gt;&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/539471476987265024&quot;&gt;December 1, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;As a bad math student, the best advice I got was to solve for one scenario, solve it for another, and only then try to connect the dots.&lt;/p&gt;&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/539471811445293056&quot;&gt;December 1, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="programming" /><category term="productivity" /><summary type="html">This has been a recurring theme for me in 2014. https://t.co/H613AEUvwj&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) December 1, 2014</summary></entry><entry><title type="html">Unbundling, Duck Duck Go, and Native Advertising</title><link href="http://localhost:4000/2014/10/30/unbundling-duck-duck-go-and-native-advertising/" rel="alternate" type="text/html" title="Unbundling, Duck Duck Go, and Native Advertising" /><published>2014-10-30T00:00:00-04:00</published><updated>2014-10-30T00:00:00-04:00</updated><id>http://localhost:4000/2014/10/30/unbundling-duck-duck-go-and-native-advertising</id><content type="html" xml:base="http://localhost:4000/2014/10/30/unbundling-duck-duck-go-and-native-advertising/">&lt;p&gt;I tweeted &lt;a href=&quot;https://twitter.com/mergesort/status/527834313325559809&quot;&gt;earlier&lt;/a&gt;, comparing Duck Duck Go to Google when searching for the term “Go 1.4 beta”, and how the first 50 results (I got bored scrolling and didn’t go further, no pun intended) on Duck Duck Go didn’t even have one mention of the language. &lt;a href=&quot;https://twitter.com/yegg&quot;&gt;Gabriel Weinberg&lt;/a&gt; being the good founder that he is (he seems very smart, and I highly respect what he’s doing) replied asking for more examples of things queries that he can &lt;a href=&quot;https://twitter.com/yegg/status/527837353248034818&quot;&gt;investigate to improve&lt;/a&gt;, so I figured I’d use the opportunity to leverage my thoughts, instead of the discussing the symptoms.&lt;/p&gt;

&lt;p&gt;Duck Duck Go performs better with general queries, because they have less personalized meaning. That’s not to say that it performs better than Google, but better relative to itself on user-specific queries. Over-generalizing, when a person is searching, they either want the general overview (e.g. a Wikipedia article, some solution to a problem they’re having, etc), or are looking for information about the query, in a manner specific to them.&lt;/p&gt;

&lt;p&gt;When they look for something specific, searches have an implied meaning to the user who is searching. Intuitively Google performs better, garnering more accurate results inferring meaning from the rich history they have of you, through their various products. The main issue I have is that Duck Duck Go seems poor at inferring implied meaning with their lexical parsing of the terms. As an experiment, if you try in a fresh browser, not logged in, in private mode, Google will still hands down return better search results.&lt;/p&gt;

&lt;p&gt;But let’s imagine a world though where Google is just another search engine, the best at searching general results, but not great at anything specific. That world is here now. I propose that &lt;strong&gt;the answer to Google’s search dominance isn’t building a better Google, it’s unbundling via specialized search engines.&lt;/strong&gt; Pinterest, Stack Overflow, and others are better equipped to understand the meaning behind your searches, based on their knowledge of you, but more importantly the rest of their ecosystem.&lt;/p&gt;

&lt;p&gt;The shift from desktop to mobile has amplified this behavior. A general search engine is not always available. It’s been interesting to watch people’s usage patterns change. They think of places like Tumblr as a search engine for creativity and exploration, something that Google is not. Twitter is the place to go if you need to know about something happening right now. Amazon is where you go to fill your consumer needs. Nowadays, for any of those, you can open an app, search, browse and discover, as opposed to having Google lead you to your content.&lt;/p&gt;

&lt;p&gt;When you’re searching for how to decorate a home on Pinterest, they can quickly understand that the life event that has or will occur, or what you’re aspiring to. This is a prime opportunity to start marketing new blinds, cleaning supplies, whatever can help you in your journey.&lt;/p&gt;

&lt;p&gt;A lot of this has been brewing in my head for a very long time, but recently I’ve started to feel like there’s more at play than just search, a vision of how we’ll use the internet soon. Not a world where ads aren’t annoying banners, but actually useful content. Currently you aren’t seeing that ad for new blinds because ads treat you like you’re in the wrong place at the wrong time, with robotic reasons for what they choose to display. It’s rather difficult to capture your intent and translate it into a sale unless you’re explicitly looking to buy something (which is a place where Google excels). Leveraging that knowledge is the dream of direct ad marketers and brand advertisers, and could actually provide you with benefit in your life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Search is hard, really hard.&lt;/p&gt;

&lt;p&gt;A general search engine is the best answer we have for the internet, for now.&lt;/p&gt;

&lt;p&gt;Ads are annoying, but they don’t have to be.&lt;/p&gt;

&lt;p&gt;There’s so much more to be written, this is only the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;As always, I’d love to &lt;a href=&quot;https://news.ycombinator.com/item?id=8533751&quot;&gt;discuss&lt;/a&gt;.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="industry" /><category term="society" /><summary type="html">I tweeted earlier, comparing Duck Duck Go to Google when searching for the term “Go 1.4 beta”, and how the first 50 results (I got bored scrolling and didn’t go further, no pun intended) on Duck Duck Go didn’t even have one mention of the language. Gabriel Weinberg being the good founder that he is (he seems very smart, and I highly respect what he’s doing) replied asking for more examples of things queries that he can investigate to improve, so I figured I’d use the opportunity to leverage my thoughts, instead of the discussing the symptoms.</summary></entry><entry><title type="html">Sapphire</title><link href="http://localhost:4000/2014/09/05/sapphire/" rel="alternate" type="text/html" title="Sapphire" /><published>2014-09-05T00:00:00-04:00</published><updated>2014-09-05T00:00:00-04:00</updated><id>http://localhost:4000/2014/09/05/sapphire</id><content type="html" xml:base="http://localhost:4000/2014/09/05/sapphire/">&lt;p&gt;I’m starting to think that the ramp up in sapphire production from Apple isn’t about a screen, but TouchID sensors on every Apple product. Even their future wearable/payment/unicorn, whatever it may end up being.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="apple" /><summary type="html">I’m starting to think that the ramp up in sapphire production from Apple isn’t about a screen, but TouchID sensors on every Apple product. Even their future wearable/payment/unicorn, whatever it may end up being.</summary></entry></feed>