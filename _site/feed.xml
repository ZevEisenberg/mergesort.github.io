<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2017-12-10T19:29:50-05:00</updated><id>http://localhost:4000/</id><title type="html">Fabisevi.ch</title><subtitle>iOS Developer &amp; Design Contractor
</subtitle><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><entry><title type="html">Foundations</title><link href="http://localhost:4000/2017/11/07/foundations/" rel="alternate" type="text/html" title="Foundations" /><published>2017-11-07T00:00:00-05:00</published><updated>2017-11-07T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/07/foundations</id><content type="html" xml:base="http://localhost:4000/2017/11/07/foundations/">&lt;p&gt;Every day at a startup is an exercise in getting to tomorrow. Some days it’s easier, some days it’s harder, but if you don’t make it until tomorrow, there won’t be a next week, month, or year.&lt;/p&gt;

&lt;p&gt;This is why building a long-term foundation is incredibly important. If you keep making it to tomorrow without thinking ahead, in three years you might look at what you’ve built and realize that you’ve set yourself up for mediocrity or failure.&lt;/p&gt;

&lt;p&gt;Every decision you make today is implicitly a decision you’ve made for the next few years. There’s a question of whether you’ll make it that far, and you can always change course from your decisions (and you should!), but it’s not without cost.&lt;/p&gt;

&lt;p&gt;Stop thinking about how to build a company that lasts, start thinking about how to build a great company that lasts. Start making decisions today that will help you build a great company. Because down the road you might look back and realize that your company isn’t that great after all.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="industry" /><summary type="html">Every day at a startup is an exercise in getting to tomorrow. Some days it’s easier, some days it’s harder, but if you don’t make it until tomorrow, there won’t be a next week, month, or year.</summary></entry><entry><title type="html">How Do I Get Started</title><link href="http://localhost:4000/2017/08/12/How-Do-I-Get-Started/" rel="alternate" type="text/html" title="How Do I Get Started" /><published>2017-08-12T00:00:00-04:00</published><updated>2017-08-12T00:00:00-04:00</updated><id>http://localhost:4000/2017/08/12/How-Do-I-Get-Started</id><content type="html" xml:base="http://localhost:4000/2017/08/12/How-Do-I-Get-Started/">&lt;h1 id=&quot;how-do-i-get-started&quot;&gt;How do I get started?&lt;/h1&gt;

&lt;p&gt;I received this email in my inbox a few days ago. Since it’s a very common question, I figured I would answer it in public so maybe it helps someone else down the road.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hi!

I saw your reply on Stephanie Hurlburt‏'s tweet about mentoring and was hoping you had time to answer a few of questions.

How do you approach learning a new code base? What do you look at first? What is/isn't helpful?

Thank you so much for your time!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hey xxxxxx,&lt;/p&gt;

&lt;p&gt;Definitely happy to help.&lt;/p&gt;

&lt;p&gt;That’s a great question. The key is to ease yourself in. You’re not going to be able to understand in one day what people have been working on for months, a year, or even years.&lt;/p&gt;

&lt;p&gt;I start off by trying to solve a small problem. Maybe it’s to fix some strings, change some icons, or refactor a larger function and simplify it. A small task will give you a low friction way to start seeing your team’s style, how they put together classes, functions, and map ideas into code. This will &lt;a href=&quot;https://en.wikipedia.org/wiki/Priming_(psychology)&quot;&gt;prime&lt;/a&gt; you to start thinking the way your teammates do.&lt;/p&gt;

&lt;p&gt;You may have your own opinions of whether what they’re doing is good or bad, and that’s completely fine. We all have those thoughts. The key to feeling confident about implementing code is to first understand the decisions that were made. It’s possible you’ll come in with an outside perspective and have all the right answers, but it’s also possible that they’re doing things you never even thought of. It’s very likely that your thinking which will change over time. Of course you should never just accept something just because it is a certain way, but you also have to accept that about your own thinking as well.&lt;/p&gt;

&lt;p&gt;That little divergence aside, as I mentioned above, start small and work outwards. When you come across things that don’t make sense, after making a good faith effort, ask a teammate for help. If you don’t know who to ask, you can run git blame and see who last touched the code. If you’re not confident in that, you can always ask a teammate who you should talk to. Sometimes a problem is a little larger and than you feel you can’t handle it without more understanding. If that’s the case ask the developer to walk through it before starting. If the scope of the task is even larger than you thought, the two of you may want to pair program on the task. It’s always better to ask questions to ensure you understand the task at hand than to go off and implement the wrong thing.&lt;/p&gt;

&lt;p&gt;Even though I’ve been programming for years now, I still follow this advice when entering a new code base. The only thing that’s changed is that the questions I ask are usually about philosophy and less specifically about code.&lt;/p&gt;

&lt;p&gt;Hope that helps!&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><summary type="html">How do I get started?</summary></entry><entry><title type="html">The Ipad 10.5</title><link href="http://localhost:4000/2017/06/21/The-iPad-10.5/" rel="alternate" type="text/html" title="The Ipad 10.5" /><published>2017-06-21T00:00:00-04:00</published><updated>2017-06-21T00:00:00-04:00</updated><id>http://localhost:4000/2017/06/21/The-iPad-10.5</id><content type="html" xml:base="http://localhost:4000/2017/06/21/The-iPad-10.5/">&lt;h1 id=&quot;the-ipad-105&quot;&gt;The iPad 10.5”&lt;/h1&gt;

&lt;p&gt;I’m surprised. I’m truly surprised at how much I love it. I’ve had an iPad mini for years, and enjoyed using it when lounging around, mostly catching up on Twitter and RSS in bed. I thought there was going to be a good chance I return the 10.5”, but decided to go all in on it and see what came of it.&lt;/p&gt;

&lt;p&gt;Quick thoughts (which I should turn into a blog post):&lt;/p&gt;

&lt;p&gt;iOS 11 is fantastic. I’d rather run iOS 11 even if it was this buggy forever than go back to iOS 10.&lt;/p&gt;

&lt;p&gt;Pencil is a game changer. Being able to just tap on the screen and start taking notes is amazing. I have wanted the Pencil since it came out, and was hoping it would come to the mini form factor, but gave up hope after there was no mini update earlier this year. The Pencil does live up to the hype, and I’m glad that I can save paper, which I waste of taking quick notes which then stay scattered all over my desk.&lt;/p&gt;

&lt;p&gt;The screen size was a drawback at first, being so used to the mini, but after a couple of days with it, the mini looks so small that it feels fake. I actually did not want a larger screen, iPads have always felt large to me, but as a computer replacement it’s quite slim.&lt;/p&gt;

&lt;p&gt;I just discovered keyboard navigation yesterday, and didn’t realize how full featured an iPad had become with a keyboard over the last couple of years. I still need to find a really good keyboard though.&lt;/p&gt;

&lt;p&gt;Thumb typing is impossible on this thing, which is annoying for when I’m in the layback mode and browsing RSS, and someone texts me. It’s actually more convenient to put down my iPad, pick up my phone, and text them back. I don’t really have a solution to this, other than hoping my hands grow over the next few months.&lt;/p&gt;

&lt;p&gt;This thing is so fast it makes my iPad feel slow, and my Mac feel ancient. Part of it is probably an illusion with the 120 hz screen, but it really is also just incredibly powerful.&lt;/p&gt;

&lt;p&gt;I bought it with the intent of using it to make mockups, and turns out it’s even better than just that. I’m using Adobe Comp to make mockups really nice, exporting them to Marvel to do prototyping, and now I’m playing with Keynote for making animations.&lt;/p&gt;

&lt;p&gt;Overall, it’s a knock out product. The iPad has come a long way over the last few years, and this iteration feels like they decided to really double down and invest in it all around.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><summary type="html">The iPad 10.5”</summary></entry><entry><title type="html">How I Use The Apple Watch</title><link href="http://localhost:4000/2017/06/21/How-I-Use-The-Apple-Watch/" rel="alternate" type="text/html" title="How I Use The Apple Watch" /><published>2017-06-21T00:00:00-04:00</published><updated>2017-06-21T00:00:00-04:00</updated><id>http://localhost:4000/2017/06/21/How-I-Use-The-Apple-Watch</id><content type="html" xml:base="http://localhost:4000/2017/06/21/How-I-Use-The-Apple-Watch/">&lt;p&gt;#How I Use The Apple Watch&lt;/p&gt;

&lt;p&gt;I live in the tech circle, but I try and keep a little bit perspective. There are some people who travel in our circle who have been rumbling about how they don’t get enough out of their Apple Watch. 🙄&lt;/p&gt;

&lt;p&gt;There are also some who are calling it an enlightening device. 🙄&lt;/p&gt;

&lt;p&gt;In the end, it’s just a device that may or may not enhance your life, how should I know? The product clearly isn’t complete, which is similar to a lot of version 1’s that Apple ships. Instead of proclaiming my undying love, or eternal hatred for it, I’m just going to tell you my experiences using the device, an anecdote at best, and how I’ve found it to be pretty useful.&lt;/p&gt;

&lt;p&gt;###Background&lt;/p&gt;

&lt;p&gt;I’m reasonably bullish on the Apple Watch, but the first version has some annoyances though. I never ever ever want to tap that side button… I’m not sending a horribly drawn doodle no matter how prominent you make that button. Almost all 3rd party apps are useless either because of loading time, poorly thought out ergonomics, or bad product decisions. The honeycomb of apps is incredibly difficult to navigate, which means I only access apps through the watch’s complications. There is only a limited amount of utility I can get out of the watch faces, since they’re pretty rigidly designed, and selection is limited. Some of the nicer looking watch faces (hello Solar) don’t even allow you to have any complications. Modular would be in my estimation 43% more fun if I could use a background image instead of black abyss. Other people have &lt;a href=&quot;https://twitter.com/mmmknower/status/677906322176765952&quot;&gt;remarked&lt;/a&gt; to me that it’s quite an oversight that you made a watch where you can’t put the time front and center.&lt;/p&gt;

&lt;p&gt;The good news is, it’s not all negatives! These are definitely solvable problems, as long as Apple views them as problems. Some of these issues will be solved by Moore’s Law, or the Cupertino transistor version of it, and other’s can be fixed with pure product work.&lt;/p&gt;

&lt;p&gt;On the positive end of the spectrum, the watch is comfortable, and while some may not like it’s design, I think it’s pretty good (which of course means it can be better). Apple’s experience in making devices thinner and lighter should pay dividends in the years to come. Interchangeable watch bands have been a delightful surprise. The Apple made ones are &lt;em&gt;really&lt;/em&gt; comfortable, and I’ve purchased many high quality knockoffs on eBay for a fraction of the price. I swap bands almost every day to match what I’m wearing, and its really a good experience, and fun. Notifications are terrific, and I use the watch as a filter, only sending really important apps to it; anything else can wait. Sleep tracking has been a revelation for me, and helped me realize that there’s more than meets the eye when thinking about the watch.&lt;/p&gt;

&lt;p&gt;###Day to Day&lt;/p&gt;

&lt;p&gt;The watch is a great device at executing a few small tasks that I repeat multiple times a day. As I mentioned, the ergonomics prevent it from being something I want to use for more than a few seconds at a time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;**Notifications: **I only let the really important through to the watch. iMessages, personal emails, direct messages on Twitter, and a few other things go straight to my watch. Everything else is a silent notification on my iPhone, which I can get to whenever I have time. Admittedly this is something that I could have done without the watch, but it ended up being a good impetus for me setting up these filters in my life, and I’m thankful I did.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Weather:&lt;/strong&gt; San Francisco may not know what it’s like to have erratic weather, but I live on the east coast. That means I check the weather a few times every day. The default weather app is nice, it’s even good, but Carrot Weather is better. Besides the fact that my weather app is insulting me, it updates frequently, and the layout is very conducive for me to get a quick glance at the forecast.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reminders and Calendar:&lt;/strong&gt; I’m a busy guy with many important adult things to do, so I need to be reminded of all my critical appointments. The truth is actually I’m incredibly forgetful, so I write down *everything… *For me anything that can be forgotten likely will be… until it’s too late. I enter all my reminders and appointments on my phone, but it’s nice to have them staring at me all day on my watch. I’ve even become proactive and sometimes take care of them before it’s time to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Timers and alarms:&lt;/strong&gt; This falls under the same page as reminders and calendars. I set a lot of timers. It’s really simple to set a timer or alarm on the watch with Siri, and then I have my wrist buzz when it’s time to flip that filet mignon, remember to breathe, or whatever else I have to do in a timely manner.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Activity tracking:&lt;/strong&gt; I’ve always been &lt;em&gt;relatively&lt;/em&gt; active by most standards. I grew up playing baseball and basketball, and now go to the gym once or twice a week. The last two years, I worked almost exclusively from home. I never realized though how sedentary I became, even with my gym visits. At first getting to 12 standing hours was hard because I just sat and coded all day, sometimes in bed, sometimes on the couch, sometimes in a chair. Getting to 12 hours became a breeze when I really started focusing on it, and I did feel better. Reaching my move goal became my next challenge. I got to that with a little effort by taking a few extra minutes on my walks to get lunch or dinner. Then once I started walking around, hitting my 30 minute exercise goal became much easier, taking just a few minutes. This isn’t supposed to be about my exercise routine though. The watch isn’t as insightful as a Fitbit or Jawbone Up, but it’s rough enough to give me some insight I wouldn’t have otherwise had.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sleep tracking:&lt;/strong&gt; To me, this is a super interesting part of the watch. I’ve always had issues with sleep. Every so often I have bouts with insomnia, but in general, finding my target sleep duration has really been a key to my personal well being. When I sleep about 8 hours a night I feel much sharper, get sick less often, and am generally more happy. David Smith created an app Sleep++, which helps you track your sleep. I’ve been able to get good data about my sleep, and can see very clearly nights where I got enough sleep, was moving around a lot. I used to use a terrific app on my iPhone for this, but would end up having to keep it plugged in and turned on all night. If it wasn’t in a charger, I could easily lose 50% of my battery to the app overnight.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###A note on sleep tracking&lt;/p&gt;

&lt;p&gt;To accommodate wearing my watch through the night, my charging routine has changed a little bit. I’ll put it to charge for a few minutes as I’m getting ready in the morning, and for a few minutes while I’m settling down to go to sleep, before sliding it back on. I also put it in airplane mode to not drain battery through the night, and also to not get notifications buzzing my wrist.&lt;/p&gt;

&lt;p&gt;###Multiple watch faces&lt;/p&gt;

&lt;p&gt;Something I realized a few weeks ago was that I wanted to have access to Sleep++ at night, but didn’t want to have it cluttering my watch face all day. It then hit me, why don’t I make a watch face specifically for night time?&lt;/p&gt;

&lt;p&gt;During the day I want to see my activity and upcoming appointments, but don’t have a use for that as I’m laying around sleeping. At night, knowing how much battery is draining, and having access to Sleep++ is much more important.&lt;/p&gt;

&lt;p&gt;Night time is a different context than day time. I don’t know if Apple thought of watch faces that way when they pushed it out to consumers, but if they did, they’ve done a bad job of messaging that… Or maybe my methods are just a hack, so who knows.&lt;/p&gt;

&lt;p&gt;Is the Apple watch for you? Should you buy it? I don’t know, do whatever makes you happy. I wanted to (and there’s still an an app I want to) build for it, and while I haven’t yet, I’ve found a way to make it a useful part of my life.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><summary type="html">#How I Use The Apple Watch</summary></entry><entry><title type="html">Debugging shortcuts for UIKeyCommand</title><link href="http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand/" rel="alternate" type="text/html" title="Debugging shortcuts for UIKeyCommand" /><published>2017-04-02T00:00:00-04:00</published><updated>2017-04-02T00:00:00-04:00</updated><id>http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand</id><content type="html" xml:base="http://localhost:4000/2017/04/02/debugging-shortcuts-for-uikeycommand/">&lt;p&gt;I recently re-discovered &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyCommand&lt;/code&gt; while listening to &lt;a href=&quot;undefined&quot;&gt;Caleb Davenport&lt;/a&gt;’s, &lt;a href=&quot;https://overcast.fm/+GuhgtcBa4&quot;&gt;podcast&lt;/a&gt;, Runtime. He’s also got a &lt;a href=&quot;https://calebd.me/posts/uikeycommand&quot;&gt;blog post&lt;/a&gt; which shows you exactly how simple it is to create &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKeyCommand&lt;/code&gt; shortcuts for your app.&lt;/p&gt;

&lt;p&gt;After reading that, I decided that it would be neat to implement them across my app, so I could also start navigating around my UI with lightning speed while I’m debugging in the simulator. I quickly realized that by using Swift extensions, I could automatically get these behaviors for free throughout our entire app.&lt;/p&gt;

&lt;p&gt;Below is a code snippet which you can drop into your app to help you speed up your workflow. With just one tap on your keyboard, you’ll be able to pop a UIViewController from a navigation stack and dismiss any presented &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keyCommands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyInputLeftArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;modifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;popViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyInputDownArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;modifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismissViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;popViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;popViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dismissViewControllerWithKeyCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget, you can make your own default shortcuts too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy debugging!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="swift" /><category term="programming" /><category term="iOS" /><summary type="html">I recently re-discovered UIKeyCommand while listening to Caleb Davenport’s, podcast, Runtime. He’s also got a blog post which shows you exactly how simple it is to create UIKeyCommand shortcuts for your app.</summary></entry><entry><title type="html">WWDC 2016 — My Fantasy Edition</title><link href="http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition/" rel="alternate" type="text/html" title="WWDC 2016 — My Fantasy Edition" /><published>2016-06-10T00:00:00-04:00</published><updated>2016-06-10T00:00:00-04:00</updated><id>http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition</id><content type="html" xml:base="http://localhost:4000/2016/06/10/wwdc-2016-my-fantasy-edition/">&lt;p&gt;WWDC is right around the corner! This post isn’t intended to be a prediction, as much as what I hope unfolds.&lt;/p&gt;

&lt;p&gt;As Betrand Serlet, a former Apple engineer discussed in this 90 second video &lt;a href=&quot;https://www.youtube.com/watch?v=jd97us27eSg&quot;&gt;clip&lt;/a&gt;, Apple often ships features iteratively. Projects start off private, only to be used internally, often times for a year or two. When they feel stable enough, Apple opens them up to 3rd party developers, and makes it an official API. Features that are deemed noteworthy and successful continue to build on, while others are simply forgotten.&lt;/p&gt;

&lt;p&gt;The three technologies below have gone through this lifecycle the last few years, and I think they are ready to converge into a big way, changing how we use iOS every day.&lt;/p&gt;

&lt;h3 id=&quot;universal-links&quot;&gt;Universal Links&lt;/h3&gt;

&lt;p&gt;Since the first days of iOS, URL schemes were a way to take you from one app to another. You could provide some context with URLs like &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp://profile&lt;/code&gt;, but nothing more.&lt;/p&gt;

&lt;p&gt;Then iOS 8 finally began allowing developers to break out of apps. Apple started allowing developers to create extensions, little parts of your app that can run in another app.&lt;/p&gt;

&lt;p&gt;In iOS 9, Apple went even further down that route by adding Spotlight. This method of universal search combined with the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; API allowed a developer to define entry points into their app. Most importantly though, Apple introduced ‘universal links’, real URLs like ones you’d find on the internet that would open a corresponding app instead of Safari. For example, if I sent you this Medium article in a text message and you had the app installed, it would open up in the Medium app, not a website. While a great idea, the implementation still left room for improvement, as users often get bounced into to an app without wanting or expecting to be.&lt;/p&gt;

&lt;h3 id=&quot;remote-view-controllers&quot;&gt;Remote View Controllers&lt;/h3&gt;

&lt;p&gt;If you’ve ever been in an app and wanted to send an email, Apple provides a way to pull up the Mail app without leaving the app you’re currently in. Apple lets developers open up this Mail view (&lt;code class=&quot;highlighter-rouge&quot;&gt;MFMailComposeViewController&lt;/code&gt; for you nerds out there), to send messages from within another app. And so you have remote view controllers, screens from another app presented within your app.&lt;/p&gt;

&lt;p&gt;Currently, if you want an experience like this, you’d have to integrate an SDK or do a one-off partnership with a company. I think iOS 10 will finally bring this functionality to all 3rd party developers. Imagine how quickly you could post a tweet by pressing a tweet button within an app and having it present a Compose Tweet screen instead of opening the Twitter app. How about calling an Uber when you’re in Google Maps, Yelp, or Foursquare? The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Implementing this can be made especially simple if you can just piggy back off the universal links that we mentioned before. Add a URL, and if the user has the app installed, it will present in your app without them having to go anywhere.&lt;/p&gt;

&lt;h3 id=&quot;siri&quot;&gt;Siri&lt;/h3&gt;

&lt;p&gt;Having been a part of iOS for almost 5 years now, Siri has gone through a similar lifecycle as these other technologies. Initially, Siri was a concierge for Apple’s apps from setting reminders to making phone calls. Apple started adding additional partners like Yelp, Wikipedia, and HomeKit vendors. People have been saying it for years, and at this point the tech world is convinced that a Siri API is most certainly coming in iOS 10.&lt;/p&gt;

&lt;p&gt;I also believe Apple is ready to take this next step, and open it up to 3rd party developers. While I don’t think we will have the ability to add Siri functionality into our apps, I’m confident that we will be able to add our own app functionality into Siri. A likely implementation would be building queries that Siri can respond to by presenting the remote view controllers discussed above. Asking Siri to “find me an Italian restaurant” will pull up the remote view controller from Yelp, so you can satisfy those pasta cravings. Those who wish to dive into your app’s richer experience could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; API and deep links, to have Siri launch you into the app in the exact place you wanted.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Whether my fantasy becomes a reality, I think WWDC is going to be huge. I’m very excited, more so than I have been the last few years. If you see something like this Monday on stage at WWDC, I told you so. And if you don’t, then just remember I’ve been wrong before, but that doesn’t mean I won’t be right some day. 😉&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="iOS" /><category term="apple" /><category term="programming" /><summary type="html">WWDC is right around the corner! This post isn’t intended to be a prediction, as much as what I hope unfolds.</summary></entry><entry><title type="html">The Expressive Nature of Swift</title><link href="http://localhost:4000/2016/05/25/the-expressive-nature-of-swift/" rel="alternate" type="text/html" title="The Expressive Nature of Swift" /><published>2016-05-25T00:00:00-04:00</published><updated>2016-05-25T00:00:00-04:00</updated><id>http://localhost:4000/2016/05/25/the-expressive-nature-of-swift</id><content type="html" xml:base="http://localhost:4000/2016/05/25/the-expressive-nature-of-swift/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Ignores commenting on another static vs. dynamic dispatch article because people won’t accept Swift is a hybrid not plain static.&lt;/p&gt;&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) &lt;a href=&quot;https://twitter.com/mergesort/status/735132240808706050&quot;&gt;May 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Guess that didn’t last long.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;http://khanlou.com/2016/05/six-months-of-swift/&quot;&gt;conversation&lt;/a&gt; &lt;a href=&quot;http://chris.eidhof.nl/post/dynamic-swift/&quot;&gt;happening&lt;/a&gt; &lt;a href=&quot;https://twitter.com/wilshipley/status/735609509993807873&quot;&gt;in&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2016/05/25/oldie_complains_about_the_old_old_ways&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://www.noodlesoft.com/blog/2016/05/23/on-dynamism/&quot;&gt;iOS&lt;/a&gt; &lt;a href=&quot;http://bitsplitting.org/2016/05/24/not-perfected-here/&quot;&gt;community&lt;/a&gt; &lt;a href=&quot;http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html&quot;&gt;at&lt;/a&gt; &lt;a href=&quot;http://blog.metaobject.com/2016/05/what-missing-in-discussion-about.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://shapeof.com/archives/2016/5/dynamic_swift.html&quot;&gt;moment&lt;/a&gt;, &lt;a href=&quot;https://ashfurrow.com/blog/adulterated-objective-c/&quot;&gt;static&lt;/a&gt; vs. &lt;a href=&quot;http://inessential.com/2016/05/15/the_case_for_dynamic-swift_optimism&quot;&gt;dynamic&lt;/a&gt; &lt;a href=&quot;http://inessential.com/2016/05/14/the_tension_of_swift&quot;&gt;programming&lt;/a&gt;. On one side we have many people who have been writing Objective-C for over 20 years (wow!) saying that the dynamism of Objective-C is the reason why it is an amazing language, and has succeeded. The argument is predicated on the fact that those nay-saying it don’t understand the power of dynamism, and how it’s empowered programmers. On the other end you have many people saying that static languages are the way forward, and that a whole class of errors is avoided, and that we should look at all the bugs prevented by having a good type system!&lt;/p&gt;

&lt;p&gt;This back and forth ignores that Chris Lattner, the creator of Swift, has himself stated that &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001948.html&quot;&gt;Swift is a hybrid,&lt;/a&gt; not explicitly static or dynamic. His explanation is very interesting, because it takes the argument from being black vs. white and turns it into many gray shades. Other languages have explored these concepts before, with ideas like &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradual_typing&quot;&gt;gradual typing&lt;/a&gt;, which was born out of the idea of grafting a type system onto dynamic languages, not making static languages more expressive.&lt;/p&gt;

&lt;p&gt;But what exactly is expressiveness? As this &lt;a href=&quot;https://stackoverflow.com/questions/638881/what-does-expressive-mean-when-referring-to-programming-languages&quot;&gt;StackOverflow post&lt;/a&gt; explains (always cite your StackOverflow posts kids):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;‘Expressive’ means that it’s easy to write code that’s easy to understand, both for the compiler and for a human reader.&lt;br /&gt;&lt;br /&gt;
Two factors that make for expressiveness:&lt;br /&gt;&lt;br /&gt;
• Intuitively readable constructs&lt;br /&gt;
• Lack of boilerplate code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Peter Norvig has a &lt;a href=&quot;https://norvig.com/design-patterns/design-patterns.pdf&quot;&gt;great talk&lt;/a&gt; on design patterns in programming languages. One slide stuck out to me as I was reading it recently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/design-patterns-norvig.png&quot; alt=&quot;Design Patterns by Peter Norvig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s break that down:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are fewer design patterns in expressive languages, because the type system does not prevent programmers from trying to express a concept.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamic languages by their very nature of a weak type system have less issue being expressive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This does not rule out static languages from being expressive!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The lack of expressiveness of static languages is dogma attached from other static languages that have existed before. I’d argue that Go is as expressive as Python, and Swift, even in its incomplete state, is nearly as expressive as many dynamic languages. You can recreate the advantages Objective-C offers through its dynamic nature by using different expressive techniques, like protocols and generics, in a statically typed language.&lt;/p&gt;

&lt;p&gt;One more thing: Many arguments imply that Apple hasn’t thought about writing apps, that they built a static language, and forgot to take into account. Care to tell me which company writes apps on the most iPhones in the world? That’s right, Apple. I don’t think they’re stupid enough to create a language which they believe is objectively worse for writing apps.&lt;/p&gt;

&lt;p&gt;Regardless of how this whole static vs. dynamic “conversation” turns out, one thing’s for certain, I’m #TeamSwift.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="swift" /><category term="programming" /><category term="iOS" /><summary type="html">Ignores commenting on another static vs. dynamic dispatch article because people won’t accept Swift is a hybrid not plain static.&amp;mdash; Joe Fabisevich 🐶🐳™ (@mergesort) May 24, 2016</summary></entry><entry><title type="html">You Can’t Do It All</title><link href="http://localhost:4000/2016/05/24/you-cant-do-it-all/" rel="alternate" type="text/html" title="You Can’t Do It All" /><published>2016-05-24T00:00:00-04:00</published><updated>2016-05-24T00:00:00-04:00</updated><id>http://localhost:4000/2016/05/24/you-cant-do-it-all</id><content type="html" xml:base="http://localhost:4000/2016/05/24/you-cant-do-it-all/">&lt;p&gt;At the original iPhone announcement, we saw &lt;a href=&quot;https://www.youtube.com/watch?v=bd6dQmN-mPw&quot;&gt;Steve Jobs on stage&lt;/a&gt; with Google’s then CEO Eric Schmidt, showing off Google’s amazing Maps. Built for the iPhone, it was something we’d never seen before. Apple’s incredible phone and revolutionary software combined with Google’s terrific web services and data coming together for one amazing product. With regards to collaboration, it’s all been downhill from there. Since then, every tech company has focused on owning the whole experience.&lt;/p&gt;

&lt;p&gt;Apple, Google, Amazon, Microsoft, and Facebook. These companies all excel at some things, and have attempted to leverage that into more. Apple understands user experience and hardware. Google gets web and machine learning like no other company. Amazon is the best at logistics and commerce. Microsoft’s productivity and enterprise know-how guides them to success. Facebook has little competition when it comes to figuring out consumer behavior.&lt;/p&gt;

&lt;p&gt;In the mobile era, each of those companies has tried to make the widget, sell it, and reap all of its rewards. But this has never worked. Amazon bought a mobile mapping company. Apple has tried to copy Microsoft Office. Google has made not one but two OS’s, a social network, and probably eight messaging apps, I’ve honestly lost count. And the list goes on.&lt;/p&gt;

&lt;p&gt;The Roman empire fell because it was too large to maintain (sure, there are other reasons too… but let’s move on). No company can be the best at everything, and the quicker some companies realize that, the more handsomely they will be rewarded with opportunities to partner with others.&lt;/p&gt;

&lt;p&gt;In programming, we have the concept of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;Unix philosophy&lt;/a&gt;. It’s the idea that you build a large and complex program by combining many single-task apps that do one thing, and do it well. Unfortunately that runs in contrast to what we’ve seen in the tech world, because that’s not what the landscape encourages. The Unix philosophy is as close as we’ve come to a successful implementation of communism, and there’s no way that’s happening. We’ve seen it work with things like federated messaging and interoperating protocols, but none have lasted long enough before a company tries to create an integrated experience around open standards.&lt;/p&gt;

&lt;p&gt;It’s hard for one company to excel at user experience, hardware, machine learning, web services, enterprise, social, and more, when each of those has different incentives, customers, and end users. If there’s anything that is Apple’s (or anyone’s) ultimate demise, it’ll be spreading itself so thin across what the company does, that they won’t be able to fight the war on all fronts.&lt;/p&gt;

&lt;p&gt;As the saying goes, “the enemy of my enemy is my friend.” In the past we’ve seen companies partner together to take on one competitor. It’s not as black and white as Google hates Apple, and Apple hates Google. It can’t be when Google is &lt;a href=&quot;https://www.bloomberg.com/news/articles/2016-01-22/google-paid-apple-1-billion-to-keep-search-bar-on-iphone&quot;&gt;paying a billion dollars&lt;/a&gt; to Apple every year to be the default search engine, and when &lt;a href=&quot;http://www.itworldcanada.com/article/why-ios-makes-more-money-for-google-than-android-does/46151&quot;&gt;iOS is more profitable&lt;/a&gt; to them than Android. It’s more like Apple uses Google when it’s &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.apple.android.music&amp;amp;hl=en&quot;&gt;opportune&lt;/a&gt;, and Google uses Apple when it’s in their &lt;a href=&quot;https://itunes.apple.com/us/app/gboard-search.-gifs.-emojis/id1091700242?mt=8&quot;&gt;best interest&lt;/a&gt;. Politics make strange bedfellows.&lt;/p&gt;

&lt;p&gt;The only reason I’ve become a bit bearish (just a bit) on Apple is that they’ve yet to prove to me that they can own the user experience and have the expertise necessary to excel in all the domains they’re entering. But I’m a man who loves to be proven wrong, and they’re a company whose proven doubters wrong many times over.&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="featured" /><category term="industry" /><summary type="html">At the original iPhone announcement, we saw Steve Jobs on stage with Google’s then CEO Eric Schmidt, showing off Google’s amazing Maps. Built for the iPhone, it was something we’d never seen before. Apple’s incredible phone and revolutionary software combined with Google’s terrific web services and data coming together for one amazing product. With regards to collaboration, it’s all been downhill from there. Since then, every tech company has focused on owning the whole experience.</summary></entry><entry><title type="html">Comparing Shyp to Time Warner</title><link href="http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner/" rel="alternate" type="text/html" title="Comparing Shyp to Time Warner" /><published>2015-04-06T00:00:00-04:00</published><updated>2015-04-06T00:00:00-04:00</updated><id>http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner</id><content type="html" xml:base="http://localhost:4000/2015/04/06/comparing-shyp-to-time-warner/">&lt;p&gt;I pushed the magic button to get a Shyp person here to send out a couple packages I have been procrastinating sending for weeks. After that was settled, I dialed up Time Warner Cable, to get my modem swapped out, a process I’ve been actively trying to get done for weeks.&lt;/p&gt;

&lt;p&gt;After a combination of pushing buttons and yelling “tech support” into the phone for 10 minutes to get me to the right place, I finally got a real life human on. I won’t bore you with the details, but half way through my call I got a call from the Shyp guy to tell me he was downstairs, and wanted to come up. I told him sorry, I was on the phone with Time Warner, but he didn’t seem to mind, and 60 seconds later I had given him my stuff and had gotten back my tracking number. Another 10 minutes later and 2 hold’s later I was off the phone with Time Warner.&lt;/p&gt;

&lt;p&gt;Guess which company I liked dealing with more?&lt;/p&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="life-events" /><summary type="html">I pushed the magic button to get a Shyp person here to send out a couple packages I have been procrastinating sending for weeks. After that was settled, I dialed up Time Warner Cable, to get my modem swapped out, a process I’ve been actively trying to get done for weeks.</summary></entry><entry><title type="html">The Apple Watch and Luxury</title><link href="http://localhost:4000/2015/03/16/the-apple-watch-and-luxury/" rel="alternate" type="text/html" title="The Apple Watch and Luxury" /><published>2015-03-16T00:00:00-04:00</published><updated>2015-03-16T00:00:00-04:00</updated><id>http://localhost:4000/2015/03/16/the-apple-watch-and-luxury</id><content type="html" xml:base="http://localhost:4000/2015/03/16/the-apple-watch-and-luxury/">&lt;p&gt;Just leaving this here for later, feel free to call me out on it if I’m wrong.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The Watch isn’t about Apple selling luxury products, it’s about making something nice looking enough that you’ll actually wear it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Joe Fabisevich</name><email>&lt;ireadyeveryemail@fabisevi.ch&gt;</email></author><category term="apple" /><summary type="html">Just leaving this here for later, feel free to call me out on it if I’m wrong.</summary></entry></feed>